version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pathfinder
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - pathfinder-network

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: pathfinder
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - pathfinder-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pathfinder-network

  # Firebase emulator for local development
  firebase:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm install -g firebase-tools && firebase emulators:start --only firestore,auth,hosting"
    ports:
      - "4000:4000"  # Emulator UI
      - "8080:8080"  # Firestore
      - "9099:9099"  # Auth
      - "5000:5000"  # Hosting
    volumes:
      - .:/app
    environment:
      - FIREBASE_TOKEN=${FIREBASE_TOKEN}
    networks:
      - pathfinder-network

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - pathfinder-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  pathfinder-network:
    driver: bridge